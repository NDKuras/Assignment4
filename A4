/**
 * Nicholas Kuras
 * Assignment 4
 * Developing code for reading file contents into a two-dim array, and perform several array operations.
 */

package a4;

import java.util.List;
import java.util.stream.Stream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Assignment4 {

    /**
     * 
     * @param filename the name of the text file
     * @return the number of lines in the text file
     * @throws IOException if an I/O error occurs
     */
    public static int getNoLines(String filename) throws IOException {
        try (Stream<String> fileStream = Files.lines(Paths.get(filename))) {
            return (int) fileStream.count();
        }
    }

    /**
     * 
     * @param filename the name of the text file
     * @return the two-dimensional array representing the contents of the text file
     * @throws IOException if an I/O error occurs
     */
    public static int[][] create2DArray(String filename) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(filename));
        int[][] array = new int[lines.size()][];

        for (int i = 0; i < lines.size(); i++) {
            String[] values = lines.get(i).trim().split("\\s+");
            array[i] = new int[values.length];
            for (int j = 0; j < values.length; j++) {
                array[i][j] = Integer.parseInt(values[j]);
            }
        }

        return array;
    }

    /**
     * This method finds the index of the longest row in a two-dimensional array.
     * 
     * @param array the two-dimensional array
     * @return the index of the longest row in the array
     */
    public static int findLongestRow(int[][] array) {
        int maxLength = 0;
        int longestRow = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i].length > maxLength) {
                maxLength = array[i].length;
                longestRow = i;
            }
        }
        return longestRow;
    }

    /**
     * This method finds the maximum value in a specified row of a two-dimensional
     * array.
     * 
     * @param array    the two-dimensional array
     * @param rowIndex the index of the row
     * @return the maximum value in the specified row
     */
    public static int findMaxInRow(int[][] array, int rowIndex) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < array[rowIndex].length; i++) {
            if (array[rowIndex][i] > max) {
                max = array[rowIndex][i];
            }
        }
        return max;
    }

    /**
     * This method finds the maximum value in a two-dimensional array.
     * 
     * @param array the two-dimensional array
     * @return the maximum value in the array
     */
    public static int findMax(int[][] array) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                if (array[i][j] > max) {
                    max = array[i][j];
                }
            }
        }
        return max;
    }

    /**
     * The main method of the program.
     * 
     * @param args command-line arguments (expects the filename as the first
     *             argument)
     */
    public static void main(String[] args) {
        String filename = null;
        if (args.length < 1) {
            // If no filename is provided as a command-line argument, display usage message
            System.out.println("usage: Assignment4 inputFilename ");
            System.exit(0);
        }
        filename = args[0];
        int arr[][] = null;
        try {
            // Print the number of lines in the file
            System.out.println("Number of lines in the file = " + getNoLines(filename));
            // Create a two-dimensional array from the file
            arr = create2DArray(filename);
            // Find the index of the longest row in the array
            int longestRow = findLongestRow(arr);
            // Print the index and length of the longest row
            System.out.println("Longest row in the file is: " + (longestRow + 1) + ", with length of: "
                    + arr[longestRow].length);
            // Print the maximum value in the first row
            System.out.println("Max value in first row = " + findMaxInRow(arr, 0));
            // Print the maximum value in the entire array
            System.out.println("Max value in file = " + findMax(arr));
        } catch (Exception e) {
            // If an exception occurs, print the exception
            System.out.print(e);
        }
    }

}
